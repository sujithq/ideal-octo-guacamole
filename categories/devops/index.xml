<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps on ideal-octo-guacamole</title><link>/ideal-octo-guacamole/categories/devops/</link><description>Recent content in DevOps on ideal-octo-guacamole</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 25 Mar 2025 06:00:00 +0000</lastBuildDate><atom:link href="/ideal-octo-guacamole/categories/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>üìò Using Federated Credentials to Secure Azure CI/CD Pipelines</title><link>/ideal-octo-guacamole/posts/2025/03/federated-credentials-secure-azure-cicd/</link><pubDate>Tue, 25 Mar 2025 06:00:00 +0000</pubDate><guid>/ideal-octo-guacamole/posts/2025/03/federated-credentials-secure-azure-cicd/</guid><description>&lt;h2 id="why-use-federated-credentials-in-cicd-pipelines">Why Use Federated Credentials in CI/CD Pipelines?&lt;/h2>
&lt;p>In DevOps, protecting credentials and preventing secret sprawl across CI/CD systems like GitHub Actions and Azure DevOps is crucial. Federated credentials provide a secure way to authenticate pipelines without storing sensitive information, reducing the risk of exposure and simplifying secret management.&lt;/p>
&lt;p>Federated identity leverages external identity providers (such as Azure Active Directory) to authenticate users and applications securely. Rather than managing multiple secrets or tokens across platforms, federated identity centralizes authentication, providing significant security and operational benefits.&lt;/p></description></item><item><title>‚öñÔ∏è Azure Bicep vs Terraform: Which One Should You Use?</title><link>/ideal-octo-guacamole/posts/2025/03/azure-bicep-vs-terraform/</link><pubDate>Sat, 15 Mar 2025 06:00:00 +0000</pubDate><guid>/ideal-octo-guacamole/posts/2025/03/azure-bicep-vs-terraform/</guid><description>&lt;h2 id="introduction">&lt;strong>Introduction&lt;/strong>&lt;/h2>
&lt;p>Infrastructure as Code (IaC) is a critical part of modern cloud development, allowing teams to define and manage infrastructure in a declarative and repeatable way. Two of the most popular IaC tools for Microsoft Azure are &lt;strong>Azure Bicep&lt;/strong> and &lt;strong>Terraform&lt;/strong>.&lt;/p>
&lt;p>But which one should you use? This article compares Bicep and Terraform based on syntax, features, ease of use, ecosystem support, and real-world scenarios.&lt;/p>
&lt;hr>
&lt;h2 id="what-is-azure-bicep">&lt;strong>What is Azure Bicep?&lt;/strong>&lt;/h2>
&lt;p>Azure Bicep is a &lt;strong>domain-specific language (DSL)&lt;/strong> developed by Microsoft as an abstraction over ARM (Azure Resource Manager) templates. It simplifies Azure infrastructure deployment by providing a cleaner syntax compared to JSON-based ARM templates.&lt;/p></description></item><item><title>üñ•Ô∏è From Zero to Hero: Terraform for Azure - Part 1</title><link>/ideal-octo-guacamole/posts/2025/03/zero-to-hero-terraform-for-azure-1/</link><pubDate>Mon, 10 Mar 2025 06:00:00 +0000</pubDate><guid>/ideal-octo-guacamole/posts/2025/03/zero-to-hero-terraform-for-azure-1/</guid><description>&lt;h2 id="introduction">&lt;strong>Introduction&lt;/strong>&lt;/h2>
&lt;p>Terraform is a powerful Infrastructure as Code (IaC) tool that enables you to define, provision, and manage Azure resources using declarative configuration files. This blog series, &lt;em>Zero to Hero: Terraform for Azure&lt;/em>, will take you through Terraform from the basics to advanced topics, using hands-on examples tailored for Azure.&lt;/p>
&lt;p>In this first post, we‚Äôll focus on setting up your development environment and deploying your first resource on Azure using Terraform.&lt;/p></description></item><item><title>üöÄ How to Retrieve Stale Branches Across All Repositories in a GitHub Organization</title><link>/ideal-octo-guacamole/posts/2025/01/retrieve-stale-branches-github-organization/</link><pubDate>Tue, 14 Jan 2025 01:00:00 +0000</pubDate><guid>/ideal-octo-guacamole/posts/2025/01/retrieve-stale-branches-github-organization/</guid><description>&lt;p>Keeping your GitHub repositories clean is crucial for maintainability. Over time, branches pile up, making it difficult to track what‚Äôs relevant. If you‚Äôre managing multiple repositories in an organization, manually identifying stale branches can be a hassle.&lt;/p>
&lt;p>Luckily, with the &lt;strong>GitHub CLI (&lt;code>gh&lt;/code>)&lt;/strong>, you can automate this process and generate a &lt;strong>report of all non-main branches along with their last authors&lt;/strong>.&lt;/p>
&lt;p>This guide walks you through a &lt;strong>Bash script&lt;/strong> that:&lt;br>
‚úÖ Retrieves all repositories in an organization&lt;br>
‚úÖ Lists branches, excluding &lt;code>main&lt;/code>, &lt;code>master&lt;/code>, and &lt;code>azure-master&lt;/code>&lt;br>
‚úÖ Identifies the last commit author for each branch&lt;br>
‚úÖ Groups the results by author for better visibility&lt;/p></description></item></channel></rss>